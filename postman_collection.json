{
  "info": {
    "name": "Employee Management System API",
    "description": "Complete API collection for testing the Employee Management System with JWT Authentication",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Auto-set authorization header for requests that need authentication",
          "if (pm.request.auth && pm.request.auth.type === 'bearer') {",
          "    pm.request.headers.add({",
          "        key: 'Authorization',",
          "        value: 'Bearer ' + pm.variables.get('accessToken')",
          "    });",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Application Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/../",
              "host": ["{{baseUrl}}"],
              "path": ["../"]
            }
          }
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/../health",
              "host": ["{{baseUrl}}"],
              "path": ["../", "health"]
            }
          }
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful registration",
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('access_token');",
                  "    pm.expect(responseJson.data).to.have.property('user');",
                  "});",
                  "",
                  "// Auto-save token for subsequent requests",
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', responseJson.data.access_token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"testuser@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful login",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('access_token');",
                  "    pm.expect(responseJson.data.user.role).to.equal('admin');",
                  "});",
                  "",
                  "// Auto-save token for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', responseJson.data.access_token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful login",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('access_token');",
                  "    pm.expect(responseJson.data.user.role).to.equal('user');",
                  "});",
                  "",
                  "// Auto-save token for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', responseJson.data.access_token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"user123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Get Profile",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            }
          }
        },
        {
          "name": "Login with Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test unauthorized response",
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response indicates invalid credentials', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "Departments",
      "item": [
        {
          "name": "Get All Departments",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/departments",
              "host": ["{{baseUrl}}"],
              "path": ["departments"]
            }
          }
        },
        {
          "name": "Get Department by ID",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/departments/1",
              "host": ["{{baseUrl}}"],
              "path": ["departments", "1"]
            }
          }
        },
        {
          "name": "Create Department",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful department creation",
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has department data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('name');",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "});",
                  "",
                  "// Save department ID for cleanup",
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('testDepartmentId', responseJson.data.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Research & Development\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/departments",
              "host": ["{{baseUrl}}"],
              "path": ["departments"]
            }
          }
        },
        {
          "name": "Create Duplicate Department",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test duplicate department validation",
                  "pm.test('Status code is 409 (Conflict)', function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test('Response indicates duplicate department', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.error.message).to.include('already exists');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Research & Development\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/departments",
              "host": ["{{baseUrl}}"],
              "path": ["departments"]
            }
          }
        },
        {
          "name": "Create Department with Existing Name (Case Insensitive)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test case insensitive duplicate validation",
                  "pm.test('Status code is 409 (Conflict)', function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test('Response indicates duplicate department', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.error.message).to.include('already exists');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Human Resources\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/departments",
              "host": ["{{baseUrl}}"],
              "path": ["departments"]
            }
          }
        },
        {
          "name": "Update Department",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Research & Development Updated\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/departments/1",
              "host": ["{{baseUrl}}"],
              "path": ["departments", "1"]
            }
          }
        },
        {
          "name": "Delete Department",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/departments/1",
              "host": ["{{baseUrl}}"],
              "path": ["departments", "1"]
            }
          }
        },
        {
          "name": "Unauthorized Access Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test unauthorized response",
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response indicates unauthorized', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/departments",
              "host": ["{{baseUrl}}"],
              "path": ["departments"]
            }
          }
        }
      ]
    },
    {
      "name": "Employees",
      "item": [
        {
          "name": "Get All Employees",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/employees?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["employees"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get Employees with Filters",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/employees?department_id=2&search=john&sort_by=salary&order=DESC",
              "host": ["{{baseUrl}}"],
              "path": ["employees"],
              "query": [
                {
                  "key": "department_id",
                  "value": "2"
                },
                {
                  "key": "search",
                  "value": "john"
                },
                {
                  "key": "sort_by",
                  "value": "salary"
                },
                {
                  "key": "order",
                  "value": "DESC"
                }
              ]
            }
          }
        },
        {
          "name": "Get Employee by ID",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/employees/1",
              "host": ["{{baseUrl}}"],
              "path": ["employees", "1"]
            }
          }
        },
        {
          "name": "Get Employee Statistics",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/employees/statistics",
              "host": ["{{baseUrl}}"],
              "path": ["employees", "statistics"]
            }
          }
        },
        {
          "name": "Create Employee",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"salary\": 75000,\n  \"department_id\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/employees",
              "host": ["{{baseUrl}}"],
              "path": ["employees"]
            }
          }
        },
        {
          "name": "Update Employee",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe Updated\",\n  \"salary\": 80000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/employees/1",
              "host": ["{{baseUrl}}"],
              "path": ["employees", "1"]
            }
          }
        },
        {
          "name": "Delete Employee",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/employees/1",
              "host": ["{{baseUrl}}"],
              "path": ["employees", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "Reports",
      "item": [
        {
          "name": "Export Employees to CSV",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/reports/employees/export/csv?includeTimestamps=true",
              "host": ["{{baseUrl}}"],
              "path": ["reports", "employees", "export", "csv"],
              "query": [
                {
                  "key": "includeTimestamps",
                  "value": "true"
                }
              ]
            }
          }
        },
        {
          "name": "Export Employees to PDF",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/reports/employees/export/pdf",
              "host": ["{{baseUrl}}"],
              "path": ["reports", "employees", "export", "pdf"]
            }
          }
        },
        {
          "name": "Export Filtered Employees to CSV",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/reports/employees/export/csv?department_id=2&sort_by=salary&order=DESC",
              "host": ["{{baseUrl}}"],
              "path": ["reports", "employees", "export", "csv"],
              "query": [
                {
                  "key": "department_id",
                  "value": "2"
                },
                {
                  "key": "sort_by",
                  "value": "salary"
                },
                {
                  "key": "order",
                  "value": "DESC"
                }
              ]
            }
          }
        }
      ]
    }
  ]
}
